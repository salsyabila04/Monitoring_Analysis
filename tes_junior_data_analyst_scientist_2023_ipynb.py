# -*- coding: utf-8 -*-
"""Tes Junior Data Analyst Scientist 2023.ipynb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fpOrTtBIWep4zfFgY07lmW8-nYq3Et7O

# **Dashboard Monitoring and Ecommerce Analysis**

Pertanyaan:
Bagaimana kondisi penjualan dari perusahaan?

1. Bagaimana kondisi penjualan dari perusahaan?
2. Bagaimana distribusi pelanggan yang membeli produk perusahaan?
3. Bagaimana kondisi ketersediaan produk di gudang? Apakah masih terpenuh aman atau harus segera dilakukan pengisian ulang?
4. Bagaimana cara meningkatkan penjualan dari perusahaan?
5. Produk mana yang mendapatkan performa penjualan terbaik dan yang kurang baik?
"""

from google.colab import drive
drive.mount('/content/drive')

"""Menyiapkan Library yang dibutuhkan"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re
import networkx as nx

"""Membaca Dataset yang dibutuhkan

"""

#membaca data user
data_user = pd.read_csv('/content/drive/MyDrive/Tes Junior Data Analyst Scientist 2023/datauser2023.csv')
data_user.head()

#membaca data produksi
data_produksi = pd.read_csv('/content/drive/MyDrive/Tes Junior Data Analyst Scientist 2023/dataproduk2023.csv')
data_produksi.head()

#membaca data produksi
data_transaksi = pd.read_csv('/content/drive/MyDrive/Tes Junior Data Analyst Scientist 2023/datatransaksi2023.csv')
data_transaksi.head()

"""Pemeriksaan data -> cek kualitas dataset, apa ada yang duplikat atau null

"""

data_user.info()
print(f"duplicated: {data_user.duplicated().sum()}")

data_produksi.info()
print(f"duplicated: {data_user.duplicated().sum()}")

data_transaksi.info()
print(f"duplicated: {data_user.duplicated().sum()}")

"""Merge dataset yang dibutuhkan"""

df = pd.merge(data_user, data_transaksi, on='User_ID')
df.head()

"""Mengganti nama field PRODUCT_ID di
dataproduk

"""

df = pd.read_csv('/content/drive/MyDrive/Tes Junior Data Analyst Scientist 2023/dataproduk2023.csv')
df['PRODUCT_ID'] = df['PRODUCT_ID'].replace({'a': 'A', 'b': 'B', 'c': 'C', 'd': 'D', 'e': 'E'})
df = df.rename(columns={'PRODUCT_ID': 'Product_ID'})
df.to_csv('/content/drive/MyDrive/Tes Junior Data Analyst Scientist 2023/dataprodukk2023.csv', index=False)

#membaca data produksi
data_produksi = pd.read_csv('/content/drive/MyDrive/Tes Junior Data Analyst Scientist 2023/dataprodukk2023.csv')
data_produksi.head()

"""# Explore *Dataset*"""

# Menampilkan jumlah nilai null pada setiap kolom
null_values = data_transaksi.isnull().sum()

# Menampilkan kolom-kolom dengan nilai null
kolom_dengan_null = data_transaksi.columns[data_transaksi.isnull().any()]

# Menampilkan baris yang memiliki nilai null
baris_dengan_null = data_transaksi[data_transaksi.isnull().any(axis=1)]

# Menampilkan hasil
print("Jumlah nilai null pada setiap kolom:")
print(null_values)

print("\nKolom-kolom dengan nilai null:")
print(kolom_dengan_null)

print("\nBaris dengan nilai null:")
print(baris_dengan_null)

# Menghapus baris yang memiliki nilai null
data_transaksi_cleaned = data_transaksi.dropna()

# Menyimpan DataFrame yang sudah dibersihkan
data_transaksi_cleaned.to_csv('/content/drive/MyDrive/Tes Junior Data Analyst Scientist 2023/datatransaksii2023.csv', index=False)

"""Mencari user dengan transaksi terbanyak berdasarkan 'User_ID'"""

# Merge DataFrames on User_ID and Product
df_merged = pd.merge(pd.merge(data_transaksi, data_user, on='User_ID'), data_produksi, on='Product_ID')

# Group by User_ID and PRODUCT_ID, then count transactions
df_grouped = df_merged.groupby(['User_ID', 'Product_ID']).size().reset_index(name='Jumlah_Transaksi')

# Sort by transaction count in descending order
df_sorted = df_grouped.sort_values(by='Jumlah_Transaksi', ascending=False)

# Display the DataFrame
print(df_sorted.head())

# Visualisasi dengan seaborn
plt.figure(figsize=(12, 8))
sns.barplot(x='User_ID', y='Jumlah_Transaksi', data=df_sorted.head(), palette='viridis')
plt.title('User dengan Jumlah Transaksi Terbanyak')
plt.xlabel('User_ID')
plt.ylabel('Jumlah Transaksi')
plt.xticks()
plt.show()

"""5 produk teratas"""

# Menghitung jumlah setiap produk
produk_count = data_transaksi['Product_ID'].value_counts()
print(produk_count)

# Visualisasi
plt.figure(figsize=(12, 6))
sns.barplot(x=produk_count.index, y=produk_count.values, palette="viridis")
plt.title('Jumlah Transaksi untuk Setiap Produk')
plt.xlabel('Product_ID')
plt.ylabel('Jumlah Transaksi')
plt.xticks()
plt.show()

# Mencari status terbanyak berdasarkan Age
status_terbanyak = data_user.groupby('Age')['Status'].agg(lambda x: x.value_counts().index[0]).reset_index()
print(status_terbanyak)

"""menghitung jumlah usesr berdasarkan status"""

# Menghitung jumlah setiap status
status_count = data_user['Status'].value_counts()
print(status_count)

# Visualisasi dengan pie chart
plt.figure(figsize=(8, 8))
plt.pie(status_count, labels=status_count.index, autopct='%1.1f%%', startangle=140, colors=['skyblue', 'lightcoral'])
plt.title('Distribusi Status User')
plt.show()

# Mencari indeks dengan harga termahal
indeks_harga_termahal = data_produksi['HARGA_SATUAN'].idxmax()

# Mendapatkan informasi harga termahal, HARGA_SATUAN, dan Product_ID
harga_termahal = data_produksi.loc[indeks_harga_termahal, 'HARGA_SATUAN']
product_id_termahal = data_produksi.loc[indeks_harga_termahal, 'Product_ID']

# Menampilkan hasil
print(f"Harga termahal: {harga_termahal} untuk Product_ID: {product_id_termahal}")

"""menganalisis jumlah transaksi"""

total_transaksi = data_transaksi.shape[0]
print(f"Jumlah transaksi keseluruhan: {total_transaksi}")

#konversi kolom date ke 'datetime'
data_transaksi['Date'] = pd.to_datetime(data_transaksi['Date'])


#hitung transaksi tiap bulan
transaksi_tiap_bulan = data_transaksi.resample('M', on='Date').size()
print(f"Jumlah transasi tiap bulan: {transaksi_tiap_bulan}")

#Visualisasi tren jumlah trans.
plt.figure(figsize=(12, 6))
transaksi_tiap_bulan.plot(marker='o')
plt.title('Tren Jumlah Transaksi per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Transaksi')
plt.show()

# Menghitung jumlah transaksi per hari
transaksi_per_hari = data_transaksi.resample('D', on='Date').size().reset_index(name='Jumlah_Transaksi')

# Visualisasi jumlah transaksi per hari dengan seaborn
plt.figure(figsize=(12, 6))
sns.lineplot(x='Date', y='Jumlah_Transaksi', data=transaksi_per_hari, marker='o', color='skyblue')
plt.title('Tren Jumlah Transaksi per Hari')
plt.xlabel('Tanggal')
plt.ylabel('Jumlah Transaksi')
plt.xticks(rotation=45)
plt.show()

"""menghitung jml produk terjual"""

# Mengelompokkan berdasarkan 'Product_ID' dan menghitung jumlah produk terjual
jumlah_produk_terjual = data_transaksi.groupby('Product_ID')['Quantity'].sum().reset_index(name='Jumlah_Produk_Terjual')

# Menampilkan hasil
print(jumlah_produk_terjual)

plt.figure(figsize=(12, 6))
sns.barplot(x='Product_ID', y='Jumlah_Produk_Terjual', data=jumlah_produk_terjual, palette='viridis')
plt.title('Jumlah Produk Terjual untuk Setiap Produk')
plt.xlabel('Product_ID')
plt.ylabel('Jumlah Produk Terjual')
plt.xticks()
plt.show()

# Sorting berdasarkan jumlah produk terjual
jumlah_produk_terjual = jumlah_produk_terjual.sort_values(by='Jumlah_Produk_Terjual', ascending=False)

# Menghitung produk terlaris (produk dengan jumlah penjualan tertinggi)
produk_terlaris = jumlah_produk_terjual.iloc[0]['Product_ID']
jumlah_terlaris = jumlah_produk_terjual.iloc[0]['Jumlah_Produk_Terjual']

# Menghitung produk dengan penjualan terendah (produk dengan jumlah penjualan terendah)
produk_terendah = jumlah_produk_terjual.iloc[-1]['Product_ID']
jumlah_terendah = jumlah_produk_terjual.iloc[-1]['Jumlah_Produk_Terjual']

# Menampilkan hasil
print(f"Produk Terlaris: {produk_terlaris} dengan jumlah penjualan {jumlah_terlaris}")
print(f"Produk Terendah: {produk_terendah} dengan jumlah penjualan {jumlah_terendah}")

data_pie = [jumlah_terlaris, jumlah_terendah]
data_pie = [jumlah_terlaris, jumlah_terendah]
labels = [f'Produk Terlaris ({produk_terlaris}) - {jumlah_terlaris} pcs',
          f'Produk Terendah ({produk_terendah}) - {jumlah_terendah} pcs']
# Visualisasi dengan diagram pie
plt.figure(figsize=(8, 8))
plt.pie(data_pie, labels=labels, autopct='', startangle=140, pctdistance=0.85, colors=['skyblue', 'pink'])
plt.title('Distribusi Jumlah Produk Terlaris dan Terendah')
plt.show()

"""mengindentifikasi rentang usia yang sering melkukan transaksi"""

df_merged = pd.merge(data_transaksi, data_user, on='User_ID')

# Menghitung frekuensi setiap nilai umur
frekuensi_umur = df_merged['Age'].value_counts().sort_index()
print(f"Frekuensi setiap umur:\n{frekuensi_umur}")

palet_warna = sns.color_palette("pastel", n_colors=len(frekuensi_umur))

plt.figure(figsize=(8, 6))
plt.bar(frekuensi_umur.index, frekuensi_umur.values, color=palet_warna)
plt.title('Frekuensi Rentang Umur yang Melakukan Transaksi')
plt.xlabel('Rentang Umur')
plt.ylabel('Frekuensi')
plt.show()

""" membandingkan jumlah transaksi dan produk terjual antara pelanggan premium dan basic.

"""

# Menggabungkan DataFrame data_transaksi dengan data_user berdasarkan 'User_ID'
df_merged = pd.merge(data_transaksi, data_user, on='User_ID')

# Mengelompokkan data berdasarkan status berlangganan
grouped_status = df_merged.groupby('Status')

# Menghitung jumlah transaksi dan produk terjual
jumlah_transaksi_produk = grouped_status.agg({'Transaction_ID': 'count', 'Quantity': 'sum'})
print(f"Jumlah transaksi produk:\n{jumlah_transaksi_produk}")

plt.figure(figsize=(10, 6))
jumlah_transaksi_produk.plot(kind='bar', stacked=True, colormap='viridis')
plt.title('Bandingkan Jumlah Transaksi dan Jumlah Produk Terjual\nAntara Pelanggan Premium dan Basic')
plt.xlabel('Status Berlangganan')
plt.ylabel('Jumlah')
plt.show()

"""identifikasi produk yang harus restock"""

produk_perlu_restock = data_produksi[data_produksi['JUMLAH_DIGUDANG'] <= data_produksi['HARUS_RESTOCK_BILA_JUMLAH_GUDANG_TERSISA']]

# Menampilkan hasil
print("Jumlah produk yang perlu di-restock:", len(produk_perlu_restock))
print(produk_perlu_restock[['Product_ID', 'JUMLAH_DIGUDANG', 'HARUS_RESTOCK_BILA_JUMLAH_GUDANG_TERSISA']])

# Menghitung jumlah transaksi untuk masing-masing produk
jumlah_transaksi = data_transaksi.groupby('Product_ID')['Quantity'].sum().reset_index()

# Menampilkan hasil
print(jumlah_transaksi)

df_merged = pd.merge(data_transaksi, data_produksi, on='Product_ID')

# menghitung pendapatan untuk setiap transaksi
df_merged['Pendapatan'] = df_merged['Quantity'] * df_merged['HARGA_SATUAN']

# mengelompokan data berdasarkan tanggal dan hitung total pendapatan untuk setiap tanggal
tren_pendapatan = df_merged.groupby('Date')['Pendapatan'].sum().reset_index()

print(df_merged[['Product_ID', 'Quantity', 'HARGA_SATUAN', 'Pendapatan']])

transaksi_per_tanggal = data_transaksi.groupby('Date')['Quantity'].sum().reset_index()

# Temukan tanggal dengan transaksi terbanyak
tanggal_terbanyak = transaksi_per_tanggal.loc[transaksi_per_tanggal['Quantity'].idxmax()]
tanggal_terendah = transaksi_per_tanggal.loc[transaksi_per_tanggal['Quantity'].idxmin()]

# Menampilkan hasil
print("Tanggal dengan Transaksi Terbanyak:", tanggal_terbanyak['Date'])
print("Jumlah Transaksi:", tanggal_terbanyak['Quantity'])

print("Tanggal dengan Transaksi Terendah:", tanggal_terendah['Date'])
print("Jumlah Transaksi:", tanggal_terendah['Quantity'])


# Visualisasikan jumlah transaksi setiap tanggal
plt.figure(figsize=(10, 6))
plt.plot(transaksi_per_tanggal['Date'], transaksi_per_tanggal['Quantity'], marker='o', linestyle='-', color='blue')
plt.title('Jumlah Transaksi Setiap Tanggal')
plt.xlabel('Tanggal Transaksi')
plt.ylabel('Jumlah Transaksi')
plt.grid(True)
plt.show()

# Tampilkan tanggal dengan transaksi terbanyak
# print("Tanggal dengan Transaksi Terbanyak:", tanggal_terbanyak, jumlah_transaksi )
# print("Tanggal dengan Transaksi Terendah:", tanggal_terendah, jumlah_transaksi )

"""tot\l pendapatan"""

df_merged['Total_Pendapatan'] = df_merged['Quantity']* df_merged['HARGA_SATUAN']

total_pendapatan = df_merged['Total_Pendapatan'].sum()
print(f"Total pendapatan adalah:", total_pendapatan)

"""rata-rata pendapatan tiap bulan"""

ratarata_pendapatan_per_transaksi = df_merged['Total_Pendapatan'].mean()

print(f"Rata-rata pendapatan per transaksi:", ratarata_pendapatan_per_transaksi)

"""membuat perbandingan pendapatan terbanyak dan terkecil"""

merged_data = pd.merge(data_transaksi, data_produksi, on='Product_ID', how='left')

rata_pendapatan = data_produksi['HARGA_SATUAN'].mean()

#hitung jumlh pendapatan per bualn
merged_data['Total_Pendapatan'] = merged_data['Quantity'] * merged_data.get('HARGA_SATUAN', rata_pendapatan)

#mengelompokkan data
per_bulan = merged_data.groupby(merged_data['Date'].dt.to_period("M")).agg({'Total_Pendapatan': 'sum'}).reset_index()

# Temukan tanggal dengan jumlah penjualan dan pendapatan terbanyak
pendapatan_terendah = per_bulan.loc[per_bulan['Total_Pendapatan'].idxmin()]
pendapatan_terbanyak = per_bulan.loc[per_bulan['Total_Pendapatan'].idxmax()]

#lihat hasil
print(f"Pendapatan Terendah: ", pendapatan_terendah)
print(f"Pendapatan Terbanyak: ", pendapatan_terbanyak)

"""## **WordCloud**

Berdasarkan Trasaction_ID
"""

from wordcloud import WordCloud

transaksi_text = ' '.join(data_transaksi['Transaction_ID'].astype(str).values)
#membuat wordcloud
wordcloud = WordCloud(width=880, height=440, background_color='white').generate(transaksi_text)

#menampilkan wordcloud
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()

